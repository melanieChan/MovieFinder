{"version":3,"sources":["index.js"],"names":["App","className","MovieSearch","useState","searchQuery","setSearchQuery","searchParameter","setSearchParameter","id","onSubmit","e","preventDefault","searchParam","encodeURIComponent","type","placeholder","value","onChange","target","MovieList","movieTitle","searchState","movies","setMovies","currentPage","setCurrentPage","useEffect","console","log","fetch","then","response","json","catch","error","Response","Search","map","movie","MovieCard","name","Title","year","Year","page","onClick","changePage","movieData","setMovieData","releaseDate","runtime","genre","director","detailsShown","setDetailsShown","a","Released","Runtime","Genre","Director","style","backgroundColor","margin","borderRadius","getDetails","container","direction","justify","spacing","item","paddingTop","marginBottom","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.891c75fc.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {useState, useEffect} from \"react\";\n\nimport Grid from \"@material-ui/core/Grid\"\nimport Card from \"@material-ui/core/Card\";\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <MovieSearch />\n    </div>\n  );\n}\n\nfunction MovieSearch() {\n  const [searchQuery, setSearchQuery] = useState(''); // user search bar input\n  const [searchParameter, setSearchParameter] = useState(''); // search query formatted\n\n  // called after user clicks search button to submit search query\n  function search(e) {\n    e.preventDefault();   // prevent page from refreshing\n    setSearchQuery(\"\"); // clear search bar\n\n    var searchParam = encodeURIComponent(searchQuery);  // format search query data\n    setSearchParameter(searchParam);\n  }\n\n  return (\n    <div id=\"search\">\n      <h1>Movies</h1>\n      <form onSubmit={search}>\n        <input\n          id=\"searchBar\"\n          type=\"text\"\n          placeholder=\"Search Movies\"\n          value = {searchQuery} // store search query\n          onChange = {e => setSearchQuery(e.target.value)}  // set search bar value to display search query\n        />\n        <button className=\"searchBtn colorFadeEffect\">Find Movie</button>\n      </form>\n\n      {/* display list of searched movies\n        [condition] ? [result if true] : [result if false]*/\n        searchParameter ? <MovieList movieTitle={searchParameter} searchState={searchParameter} /> : <></>\n      }\n\n    </div>\n    );\n}\n\n// list of movies from search results\nfunction MovieList({movieTitle, searchState}) {\n  const [movies, setMovies] = useState(null);\n  const [currentPage, setCurrentPage] = useState(1);\n\n  useEffect(() => {\n    // reset current page count to 1 if a new movie is searched\n    if (currentPage !== 1)\n      setCurrentPage(1);\n  }, [searchState]);\n\n    // search movies\n    useEffect(()=> {\n      console.log(\"getting search data for \" + movieTitle + \" page \" + currentPage);\n\n        fetch(`https://www.omdbapi.com/?s=${movieTitle}&apikey=52514a3a&page=${currentPage}`)\n          .then(response => response.json())\n          .then(response => setMovies(response))\n          .catch(console.error);\n    }, [searchState, currentPage]); // useEffect will run when search state or page changes due to user search input changes or page navigation\n\n    // called when user clicks on button to go to different page\n    function changePage(page) {\n      if (page !== currentPage)\n        setCurrentPage(page);\n    }\n\n      return (\n           <div className=\"movieList\">\n           {   // display search results\n             movies && movies.Response === \"True\" ?\n\n              /* display a card for every movie in search results list */\n               movies.Search.map(movie => {\n                  return <MovieCard name={movie.Title} year={movie.Year}/>\n              })\n              :   // if no results found\n              <div className=\"movieList\">\n                  <h2>No results</h2>\n              </div>\n          }\n\n          { /* display page navigation menu */\n            [1,2,3].map((page) => (\n                <button className=\"pageBtn colorFadeEffect\" onClick={() => {changePage(page)} }>{page}</button>\n              ))\n          }\n\n           </div>\n         );\n}\n\n// card showing details of a specific movie\nfunction MovieCard({name, year}) {\n  const [movieData, setMovieData] = useState(null);\n\n  var releaseDate = \"Unknown release date\";\n  var runtime = \"Unknown runtime\";\n  var genre = \"Unknown genre\";\n  var director = \"Unknown director\";\n\n  const [detailsShown, setDetailsShown] = useState(false);  // whether or not details are currently displayed\n\n  // clear data of movie on same card from previos page / search\n  useEffect(() => {\n    setDetailsShown(false);\n  }, [name, year]);\n\n  // find details of movie\n  async function getDetails() {\n    // will only get data if data isn't already displayed\n    if (!detailsShown) {\n      console.log(\"getting movie data\");\n      fetch(`https://www.omdbapi.com/?t=${name}&y=${year}&apikey=52514a3a`)\n        .then(response => response.json())\n        .then(setMovieData)\n        .catch(console.error);\n      setDetailsShown(true);\n    }\n  }\n\n  // set movie data variables to results retrieved\n  if (movieData && movieData.Response === \"True\") {\n    releaseDate = `${movieData.Released}`;\n    runtime = `${movieData.Runtime}`;\n    genre = `${movieData.Genre}`;\n    if (movieData.Director !== null && movieData.Director !== \"N/A\")\n      director = `${movieData.Director}`;\n  }\n\n  return (\n    <div >\n      <Card  style={{backgroundColor: 'transparent', margin: \"20px\", borderRadius: \"20px\"}}>\n        <CardActionArea onClick ={() => {\n          console.log(\"clicked on movie to see details\");\n          console.log(\"detailsShown: \" + detailsShown);\n          getDetails();\n        }}>\n          <Grid container\n            className=\"cardGridContainer\"\n            direction = \"column\"\n            justify = \"center\"\n            spacing = {2} >\n\n          {/*movie title*/}\n            <Grid item style={{paddingTop: \"25px\", marginBottom: \"20px\"}} className=\"movieTitle\">{name} {year}</Grid>\n\n          {/* horizontal row of movie details */\n            detailsShown ?\n            <Grid container\n              className = \"cardDetailsContainer\"\n              direction='row'\n              justify = \"center\"\n              spacing = {7}>\n              <Grid item>{releaseDate}</Grid>\n              <Grid item>{runtime}</Grid>\n              <Grid item>{genre}</Grid>\n              <Grid item>{director}</Grid>\n            </Grid>\n            : <></>\n          }\n\n          </Grid>\n        </CardActionArea>\n      </Card>\n    </div>\n  );\n}\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}