[{"/Users/melanie/Downloads/Git/MoviesList/src/index.js":"1","/Users/melanie/Downloads/Git/MoviesList/src/App.js":"2","/Users/melanie/Downloads/Git/MoviesList/src/reportWebVitals.js":"3"},{"size":5530,"mtime":1623194350704,"results":"4","hashOfConfig":"5"},{"size":528,"mtime":1622614746501,"results":"6","hashOfConfig":"5"},{"size":362,"mtime":1622614746506,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"b1ogsh",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/melanie/Downloads/Git/MoviesList/src/index.js",["15","16"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {useState, useEffect} from \"react\";\n\nimport Grid from \"@material-ui/core/Grid\"\nimport Card from \"@material-ui/core/Card\";\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <MovieSearch />\n    </div>\n  );\n}\n\nfunction MovieSearch() {\n  const [searchQuery, setSearchQuery] = useState(''); // user search bar input\n  const [searchParameter, setSearchParameter] = useState(''); // search query formatted\n\n  // called after user clicks search button to submit search query\n  function search(e) {\n    e.preventDefault();   // prevent page from refreshing\n    setSearchQuery(\"\"); // clear search bar\n\n    var searchParam = encodeURIComponent(searchQuery);  // format search query data\n    setSearchParameter(searchParam);\n  }\n\n  return (\n    <div id=\"search\">\n      <h1>Movies</h1>\n      <form onSubmit={search}>\n        <input\n          id=\"searchBar\"\n          type=\"text\"\n          placeholder=\"Search Movies\"\n          value = {searchQuery} // store search query\n          onChange = {e => setSearchQuery(e.target.value)}  // set search bar value to display search query\n        />\n        <button className=\"searchBtn\">Find Movie</button>\n      </form>\n\n      {/* display list of searched movies\n        [condition] ? [result if true] : [result if false]*/\n        searchParameter ? <MovieList movieTitle={searchParameter} searchState={searchParameter} /> : <></>\n      }\n\n    </div>\n    );\n}\n\n// list of movies from search results\nfunction MovieList({movieTitle, searchState}) {\n  const [movies, setMovies] = useState(null);\n  const [currentPage, setCurrentPage] = useState(1);\n\n  useEffect(() => {\n    // reset current page count to 1 if a new movie is searched\n    if (currentPage !== 1)\n      setCurrentPage(1);\n  }, [searchState]);\n\n    // search movies\n    useEffect(()=> {\n      console.log(\"getting search data for \" + movieTitle + \" page \" + currentPage);\n\n        fetch(`http://www.omdbapi.com/?s=${movieTitle}&apikey=52514a3a&page=${currentPage}`)\n          .then(response => response.json())\n          .then(response => setMovies(response))\n          .catch(console.error);\n    }, [searchState, currentPage]); // useEffect will run when search state or page changes due to user search input changes or page navigation\n\n    // called when user clicks on button to go to different page\n    function changePage(page) {\n      if (page !== currentPage)\n        setCurrentPage(page);\n    }\n\n    // display search results\n    if (movies && movies.Response === \"True\") {\n      console.log(\"displaying movies for \" + movieTitle + \" page \" + currentPage);\n\n      return (\n           <div className=\"movieList\">\n              {/* display a card for every movie in search results list */\n               movies.Search.map(movie => {\n                  return <MovieCard name={ movie.Title}\n                                releaseDate={movie.Year} />\n              })}\n\n              { /* page navigation */\n                [1,2,3].map((page) => (\n                    <button onClick={() => {changePage(page)} }>{page}</button>\n                  ))}\n           </div>\n         );\n    }\n\n  return (\n    <div className=\"movieList\">\n      <h2>No results</h2>\n    </div>\n  );\n}\n\n// card showing details of a specific movie\nfunction MovieCard({name, releaseDate}) {\n  const [movieData, setMovieData] = useState(null);\n\n  var runtime = \"Unknown duration\";\n  var genre = \"Unknown genre\";\n  var director = \"Unknown director\";\n\n  const [detailsShown, setDetailsShown] = useState(false);  // whether or not details are currently displayed\n\n  // find details of movie\n  async function getDetails() {\n    // will only get data if data isn't already displayed\n    if (!detailsShown) {\n      console.log(\"getting movie data\");\n      fetch(`http://www.omdbapi.com/?t=${name}&apikey=52514a3a`)\n        .then(response => response.json())\n        .then(setMovieData)\n        .catch(console.error);\n      setDetailsShown(true);\n    }\n  }\n\n  // set movie data variables to results retrieved\n  if (movieData && movieData.Response === \"True\") {\n    runtime = `${movieData.Runtime}`;\n    genre = `${movieData.Genre}`;\n    if (movieData.Director !== null && movieData.Director !== \"N/A\")\n      director = `${movieData.Director}`;\n  }\n\n  return (\n    <div >\n      <Card  style={{backgroundColor: 'transparent', margin: \"20px\", borderRadius: \"20px\"}}>\n        <CardActionArea onClick ={() => {\n          console.log(\"clicked on movie to see details\");\n          console.log(\"detailsShown: \" + detailsShown);\n          getDetails();\n        }}>\n          <Grid container\n            className=\"cardGridContainer\"\n            direction = \"column\"\n            justify = \"center\"\n            spacing = {2} >\n\n          {/*movie title*/}\n            <Grid item style={{paddingTop: \"25px\", marginBottom: \"20px\"}} className=\"movieTitle\">{name}</Grid>\n\n          {/* horizontal row of movie details */}\n            <Grid container\n              className = \"cardDetailsContainer\"\n              direction='row'\n              justify = \"center\"\n              spacing = {7}>\n              <Grid item>{releaseDate}</Grid>\n              <Grid item>{runtime}</Grid>\n              <Grid item>{genre}</Grid>\n              <Grid item>{director}</Grid>\n            </Grid>\n\n          </Grid>\n        </CardActionArea>\n      </Card>\n    </div>\n  );\n}\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n","/Users/melanie/Downloads/Git/MoviesList/src/App.js",[],"/Users/melanie/Downloads/Git/MoviesList/src/reportWebVitals.js",[],{"ruleId":"17","severity":1,"message":"18","line":63,"column":6,"nodeType":"19","endLine":63,"endColumn":19,"suggestions":"20"},{"ruleId":"17","severity":1,"message":"21","line":73,"column":8,"nodeType":"19","endLine":73,"endColumn":34,"suggestions":"22"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'currentPage'. Either include it or remove the dependency array.","ArrayExpression",["23"],"React Hook useEffect has a missing dependency: 'movieTitle'. Either include it or remove the dependency array.",["24"],{"desc":"25","fix":"26"},{"desc":"27","fix":"28"},"Update the dependencies array to be: [currentPage, searchState]",{"range":"29","text":"30"},"Update the dependencies array to be: [searchState, currentPage, movieTitle]",{"range":"31","text":"32"},[1882,1895],"[currentPage, searchState]",[2254,2280],"[searchState, currentPage, movieTitle]"]