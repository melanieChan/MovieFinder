{"ast":null,"code":"var _jsxFileName = \"/Users/melanie/Downloads/Git/MoviesList/src/index.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { useState, useEffect } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: /*#__PURE__*/_jsxDEV(MovieSearch, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }, this);\n}\n\n_c = App;\n\nfunction MovieSearch() {\n  _s();\n\n  const [searchQuery, setSearchQuery] = useState(''); // user search bar input\n\n  const [searchParameter, setSearchParameter] = useState(''); // search query formatted\n  // called after user clicks search button to submit search query\n\n  function search(e) {\n    e.preventDefault(); // prevent page from refreshing\n\n    setSearchQuery(\"\"); // clear search bar\n\n    var searchParam = encodeURIComponent(searchQuery); // format search query data\n\n    setSearchParameter(searchParam);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"search\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Movies\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: search,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"searchBar\",\n        type: \"text\",\n        placeholder: \"Search Movies\",\n        value: searchQuery // store search query\n        ,\n        onChange: e => setSearchQuery(e.target.value) // set search bar value to display search query\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"searchBtn\",\n        children: \"Find Movie\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this),\n    /* display list of searched movies\n     [condition] ? [result if true] : [result if false]*/\n    searchParameter ? /*#__PURE__*/_jsxDEV(MovieList, {\n      movieTitle: searchParameter,\n      searchState: searchParameter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 27\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n} // list of movies from search results\n\n\n_s(MovieSearch, \"tD4cNuRL2rirjuLoO98+r2XZbs8=\");\n\n_c2 = MovieSearch;\n\nfunction MovieList({\n  movieTitle,\n  searchState\n}) {\n  _s2();\n\n  const [movies, setMovies] = useState(null);\n  const [currentPage, setCurrentPage] = useState(1);\n  useEffect(() => {\n    // reset current page count to 1 if a new movie is searched\n    if (currentPage !== 1) setCurrentPage(1);\n  }, [searchState]); // search movies\n\n  useEffect(() => {\n    console.log(\"getting search data for \" + movieTitle + \" page \" + currentPage);\n    fetch(`http://www.omdbapi.com/?s=${movieTitle}&apikey=52514a3a&page=${currentPage}`).then(response => response.json()).then(response => setMovies(response)).catch(console.error);\n  }, [searchState, currentPage]); // useEffect will run when search state or page changes due to user search input changes or page navigation\n  // called when user clicks on button to go to different page\n\n  function changePage(page) {\n    if (page !== currentPage) setCurrentPage(page);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"movieList\",\n    children: [// display search results\n    movies && movies.Response === \"True\" ?\n    /* display a card for every movie in search results list */\n    movies.Search.map(movie => {\n      return /*#__PURE__*/_jsxDEV(MovieCard, {\n        name: movie.Title,\n        year: movie.Year\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 26\n      }, this);\n    }) :\n    /*#__PURE__*/\n    // if no results found\n    _jsxDEV(\"div\", {\n      className: \"movieList\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"No results\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 19\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 15\n    }, this),\n    /* display page navigation menu */\n    [1, 2, 3].map(page => /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        changePage(page);\n      },\n      children: page\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 12\n  }, this);\n} // card showing details of a specific movie\n\n\n_s2(MovieList, \"IAU2y9/qRSb1lucB15DUlC3UYr8=\");\n\n_c3 = MovieList;\n\nfunction MovieCard({\n  name,\n  year\n}) {\n  _s3();\n\n  const [movieData, setMovieData] = useState(null);\n  var releaseDate = \"Unknown release date\";\n  var runtime = \"Unknown runtime\";\n  var genre = \"Unknown genre\";\n  var director = \"Unknown director\";\n  const [detailsShown, setDetailsShown] = useState(false); // whether or not details are currently displayed\n  // clear data of movie on same card from previos page / search\n\n  useEffect(() => {\n    setDetailsShown(false);\n  }, [name, year]); // find details of movie\n\n  async function getDetails() {\n    // will only get data if data isn't already displayed\n    if (!detailsShown) {\n      console.log(\"getting movie data\");\n      fetch(`http://www.omdbapi.com/?t=${name}&y=${year}&apikey=52514a3a`).then(response => response.json()).then(setMovieData).catch(console.error);\n      setDetailsShown(true);\n    }\n  } // set movie data variables to results retrieved\n\n\n  if (movieData && movieData.Response === \"True\") {\n    releaseDate = `${movieData.Released}`;\n    runtime = `${movieData.Runtime}`;\n    genre = `${movieData.Genre}`;\n    if (movieData.Director !== null && movieData.Director !== \"N/A\") director = `${movieData.Director}`;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      style: {\n        backgroundColor: 'transparent',\n        margin: \"20px\",\n        borderRadius: \"20px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(CardActionArea, {\n        onClick: () => {\n          console.log(\"clicked on movie to see details\");\n          console.log(\"detailsShown: \" + detailsShown);\n          getDetails();\n        },\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          className: \"cardGridContainer\",\n          direction: \"column\",\n          justify: \"center\",\n          spacing: 2,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            style: {\n              paddingTop: \"25px\",\n              marginBottom: \"20px\"\n            },\n            className: \"movieTitle\",\n            children: [name, \" \", year]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 13\n          }, this),\n          /* horizontal row of movie details */\n          detailsShown ? /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            className: \"cardDetailsContainer\",\n            direction: \"row\",\n            justify: \"center\",\n            spacing: 7,\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              children: releaseDate\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              children: runtime\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              children: genre\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 170,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              children: director\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 13\n          }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 5\n  }, this);\n}\n\n_s3(MovieCard, \"+1kyi/xBfAcoT9Tn2t5vTvRuAzU=\");\n\n_c4 = MovieCard;\nReactDOM.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 184,\n  columnNumber: 3\n}, this), document.getElementById('root'));\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"MovieSearch\");\n$RefreshReg$(_c3, \"MovieList\");\n$RefreshReg$(_c4, \"MovieCard\");","map":{"version":3,"sources":["/Users/melanie/Downloads/Git/MoviesList/src/index.js"],"names":["React","ReactDOM","useState","useEffect","Grid","Card","CardActionArea","App","MovieSearch","searchQuery","setSearchQuery","searchParameter","setSearchParameter","search","e","preventDefault","searchParam","encodeURIComponent","target","value","MovieList","movieTitle","searchState","movies","setMovies","currentPage","setCurrentPage","console","log","fetch","then","response","json","catch","error","changePage","page","Response","Search","map","movie","Title","Year","MovieCard","name","year","movieData","setMovieData","releaseDate","runtime","genre","director","detailsShown","setDetailsShown","getDetails","Released","Runtime","Genre","Director","backgroundColor","margin","borderRadius","paddingTop","marginBottom","render","document","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {useState, useEffect} from \"react\";\n\nimport Grid from \"@material-ui/core/Grid\"\nimport Card from \"@material-ui/core/Card\";\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <MovieSearch />\n    </div>\n  );\n}\n\nfunction MovieSearch() {\n  const [searchQuery, setSearchQuery] = useState(''); // user search bar input\n  const [searchParameter, setSearchParameter] = useState(''); // search query formatted\n\n  // called after user clicks search button to submit search query\n  function search(e) {\n    e.preventDefault();   // prevent page from refreshing\n    setSearchQuery(\"\"); // clear search bar\n\n    var searchParam = encodeURIComponent(searchQuery);  // format search query data\n    setSearchParameter(searchParam);\n  }\n\n  return (\n    <div id=\"search\">\n      <h1>Movies</h1>\n      <form onSubmit={search}>\n        <input\n          id=\"searchBar\"\n          type=\"text\"\n          placeholder=\"Search Movies\"\n          value = {searchQuery} // store search query\n          onChange = {e => setSearchQuery(e.target.value)}  // set search bar value to display search query\n        />\n        <button className=\"searchBtn\">Find Movie</button>\n      </form>\n\n      {/* display list of searched movies\n        [condition] ? [result if true] : [result if false]*/\n        searchParameter ? <MovieList movieTitle={searchParameter} searchState={searchParameter} /> : <></>\n      }\n\n    </div>\n    );\n}\n\n// list of movies from search results\nfunction MovieList({movieTitle, searchState}) {\n  const [movies, setMovies] = useState(null);\n  const [currentPage, setCurrentPage] = useState(1);\n\n  useEffect(() => {\n    // reset current page count to 1 if a new movie is searched\n    if (currentPage !== 1)\n      setCurrentPage(1);\n  }, [searchState]);\n\n    // search movies\n    useEffect(()=> {\n      console.log(\"getting search data for \" + movieTitle + \" page \" + currentPage);\n\n        fetch(`http://www.omdbapi.com/?s=${movieTitle}&apikey=52514a3a&page=${currentPage}`)\n          .then(response => response.json())\n          .then(response => setMovies(response))\n          .catch(console.error);\n    }, [searchState, currentPage]); // useEffect will run when search state or page changes due to user search input changes or page navigation\n\n    // called when user clicks on button to go to different page\n    function changePage(page) {\n      if (page !== currentPage)\n        setCurrentPage(page);\n    }\n\n      return (\n           <div className=\"movieList\">\n           {   // display search results\n             movies && movies.Response === \"True\" ?\n\n              /* display a card for every movie in search results list */\n               movies.Search.map(movie => {\n                  return <MovieCard name={movie.Title} year={movie.Year}/>\n              })\n              :   // if no results found\n              <div className=\"movieList\">\n                  <h2>No results</h2>\n              </div>\n          }\n\n          { /* display page navigation menu */\n            [1,2,3].map((page) => (\n                <button onClick={() => {changePage(page)} }>{page}</button>\n              ))\n          }\n\n           </div>\n         );\n}\n\n// card showing details of a specific movie\nfunction MovieCard({name, year}) {\n  const [movieData, setMovieData] = useState(null);\n\n  var releaseDate = \"Unknown release date\";\n  var runtime = \"Unknown runtime\";\n  var genre = \"Unknown genre\";\n  var director = \"Unknown director\";\n\n  const [detailsShown, setDetailsShown] = useState(false);  // whether or not details are currently displayed\n\n  // clear data of movie on same card from previos page / search\n  useEffect(() => {\n    setDetailsShown(false);\n  }, [name, year]);\n\n  // find details of movie\n  async function getDetails() {\n    // will only get data if data isn't already displayed\n    if (!detailsShown) {\n      console.log(\"getting movie data\");\n      fetch(`http://www.omdbapi.com/?t=${name}&y=${year}&apikey=52514a3a`)\n        .then(response => response.json())\n        .then(setMovieData)\n        .catch(console.error);\n      setDetailsShown(true);\n    }\n  }\n\n  // set movie data variables to results retrieved\n  if (movieData && movieData.Response === \"True\") {\n    releaseDate = `${movieData.Released}`;\n    runtime = `${movieData.Runtime}`;\n    genre = `${movieData.Genre}`;\n    if (movieData.Director !== null && movieData.Director !== \"N/A\")\n      director = `${movieData.Director}`;\n  }\n\n  return (\n    <div >\n      <Card  style={{backgroundColor: 'transparent', margin: \"20px\", borderRadius: \"20px\"}}>\n        <CardActionArea onClick ={() => {\n          console.log(\"clicked on movie to see details\");\n          console.log(\"detailsShown: \" + detailsShown);\n          getDetails();\n        }}>\n          <Grid container\n            className=\"cardGridContainer\"\n            direction = \"column\"\n            justify = \"center\"\n            spacing = {2} >\n\n          {/*movie title*/}\n            <Grid item style={{paddingTop: \"25px\", marginBottom: \"20px\"}} className=\"movieTitle\">{name} {year}</Grid>\n\n          {/* horizontal row of movie details */\n            detailsShown ?\n            <Grid container\n              className = \"cardDetailsContainer\"\n              direction='row'\n              justify = \"center\"\n              spacing = {7}>\n              <Grid item>{releaseDate}</Grid>\n              <Grid item>{runtime}</Grid>\n              <Grid item>{genre}</Grid>\n              <Grid item>{director}</Grid>\n            </Grid>\n            : <></>\n          }\n\n          </Grid>\n        </CardActionArea>\n      </Card>\n    </div>\n  );\n}\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"]},"metadata":{},"sourceType":"module"}